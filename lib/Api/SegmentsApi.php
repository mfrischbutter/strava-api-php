<?php
/**
 * SegmentsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SegmentsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SegmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation exploreSegments
     *
     * Explore segments
     *
     * @param  float[] $bounds The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude] (required)
     * @param  string $activity_type Desired activity type. (optional)
     * @param  int $min_cat The minimum climbing category. (optional)
     * @param  int $max_cat The maximum climbing category. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ExplorerResponse
     */
    public function exploreSegments($bounds, $activity_type = null, $min_cat = null, $max_cat = null)
    {
        list($response) = $this->exploreSegmentsWithHttpInfo($bounds, $activity_type, $min_cat, $max_cat);
        return $response;
    }

    /**
     * Operation exploreSegmentsWithHttpInfo
     *
     * Explore segments
     *
     * @param  float[] $bounds The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude] (required)
     * @param  string $activity_type Desired activity type. (optional)
     * @param  int $min_cat The minimum climbing category. (optional)
     * @param  int $max_cat The maximum climbing category. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ExplorerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function exploreSegmentsWithHttpInfo($bounds, $activity_type = null, $min_cat = null, $max_cat = null)
    {
        $returnType = '\Swagger\Client\Model\ExplorerResponse';
        $request = $this->exploreSegmentsRequest($bounds, $activity_type, $min_cat, $max_cat);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExplorerResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Fault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exploreSegmentsAsync
     *
     * Explore segments
     *
     * @param  float[] $bounds The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude] (required)
     * @param  string $activity_type Desired activity type. (optional)
     * @param  int $min_cat The minimum climbing category. (optional)
     * @param  int $max_cat The maximum climbing category. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exploreSegmentsAsync($bounds, $activity_type = null, $min_cat = null, $max_cat = null)
    {
        return $this->exploreSegmentsAsyncWithHttpInfo($bounds, $activity_type, $min_cat, $max_cat)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exploreSegmentsAsyncWithHttpInfo
     *
     * Explore segments
     *
     * @param  float[] $bounds The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude] (required)
     * @param  string $activity_type Desired activity type. (optional)
     * @param  int $min_cat The minimum climbing category. (optional)
     * @param  int $max_cat The maximum climbing category. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exploreSegmentsAsyncWithHttpInfo($bounds, $activity_type = null, $min_cat = null, $max_cat = null)
    {
        $returnType = '\Swagger\Client\Model\ExplorerResponse';
        $request = $this->exploreSegmentsRequest($bounds, $activity_type, $min_cat, $max_cat);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exploreSegments'
     *
     * @param  float[] $bounds The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude] (required)
     * @param  string $activity_type Desired activity type. (optional)
     * @param  int $min_cat The minimum climbing category. (optional)
     * @param  int $max_cat The maximum climbing category. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exploreSegmentsRequest($bounds, $activity_type = null, $min_cat = null, $max_cat = null)
    {
        // verify the required parameter 'bounds' is set
        if ($bounds === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bounds when calling exploreSegments'
            );
        }
        if (count($bounds) > 4) {
            throw new \InvalidArgumentException('invalid value for "$bounds" when calling SegmentsApi.exploreSegments, number of items must be less than or equal to 4.');
        }
        if (count($bounds) < 4) {
            throw new \InvalidArgumentException('invalid value for "$bounds" when calling SegmentsApi.exploreSegments, number of items must be greater than or equal to 4.');
        }

        if ($min_cat !== null && $min_cat > 5) {
            throw new \InvalidArgumentException('invalid value for "$min_cat" when calling SegmentsApi.exploreSegments, must be smaller than or equal to 5.');
        }
        if ($min_cat !== null && $min_cat < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_cat" when calling SegmentsApi.exploreSegments, must be bigger than or equal to 0.');
        }

        if ($max_cat !== null && $max_cat > 5) {
            throw new \InvalidArgumentException('invalid value for "$max_cat" when calling SegmentsApi.exploreSegments, must be smaller than or equal to 5.');
        }
        if ($max_cat !== null && $max_cat < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_cat" when calling SegmentsApi.exploreSegments, must be bigger than or equal to 0.');
        }


        $resourcePath = '/segments/explore';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($bounds)) {
            $bounds = ObjectSerializer::serializeCollection($bounds, 'csv', true);
        }
        if ($bounds !== null) {
            $queryParams['bounds'] = ObjectSerializer::toQueryValue($bounds);
        }
        // query params
        if ($activity_type !== null) {
            $queryParams['activity_type'] = ObjectSerializer::toQueryValue($activity_type);
        }
        // query params
        if ($min_cat !== null) {
            $queryParams['min_cat'] = ObjectSerializer::toQueryValue($min_cat);
        }
        // query params
        if ($max_cat !== null) {
            $queryParams['max_cat'] = ObjectSerializer::toQueryValue($max_cat);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLeaderboardBySegmentId
     *
     * Get Segment Leaderboard
     *
     * @param  int $id The identifier of the segment leaderboard. (required)
     * @param  string $gender Filter by gender. (optional)
     * @param  string $age_group Summit Feature. Filter by age group. (optional)
     * @param  string $weight_class Summit Feature. Filter by weight class. (optional)
     * @param  bool $following Filter by friends of the authenticated athlete. (optional)
     * @param  int $club_id Filter by club. (optional)
     * @param  string $date_range Filter by date range, will be in the athlete&#39;s timezone (optional)
     * @param  int $context_entries context_entries (optional)
     * @param  int $page Page number. (optional)
     * @param  int $per_page Number of items per page. Defaults to 30. (optional, default to 30)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SegmentLeaderboard
     */
    public function getLeaderboardBySegmentId($id, $gender = null, $age_group = null, $weight_class = null, $following = null, $club_id = null, $date_range = null, $context_entries = null, $page = null, $per_page = '30')
    {
        list($response) = $this->getLeaderboardBySegmentIdWithHttpInfo($id, $gender, $age_group, $weight_class, $following, $club_id, $date_range, $context_entries, $page, $per_page);
        return $response;
    }

    /**
     * Operation getLeaderboardBySegmentIdWithHttpInfo
     *
     * Get Segment Leaderboard
     *
     * @param  int $id The identifier of the segment leaderboard. (required)
     * @param  string $gender Filter by gender. (optional)
     * @param  string $age_group Summit Feature. Filter by age group. (optional)
     * @param  string $weight_class Summit Feature. Filter by weight class. (optional)
     * @param  bool $following Filter by friends of the authenticated athlete. (optional)
     * @param  int $club_id Filter by club. (optional)
     * @param  string $date_range Filter by date range, will be in the athlete&#39;s timezone (optional)
     * @param  int $context_entries (optional)
     * @param  int $page Page number. (optional)
     * @param  int $per_page Number of items per page. Defaults to 30. (optional, default to 30)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SegmentLeaderboard, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLeaderboardBySegmentIdWithHttpInfo($id, $gender = null, $age_group = null, $weight_class = null, $following = null, $club_id = null, $date_range = null, $context_entries = null, $page = null, $per_page = '30')
    {
        $returnType = '\Swagger\Client\Model\SegmentLeaderboard';
        $request = $this->getLeaderboardBySegmentIdRequest($id, $gender, $age_group, $weight_class, $following, $club_id, $date_range, $context_entries, $page, $per_page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SegmentLeaderboard',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Fault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLeaderboardBySegmentIdAsync
     *
     * Get Segment Leaderboard
     *
     * @param  int $id The identifier of the segment leaderboard. (required)
     * @param  string $gender Filter by gender. (optional)
     * @param  string $age_group Summit Feature. Filter by age group. (optional)
     * @param  string $weight_class Summit Feature. Filter by weight class. (optional)
     * @param  bool $following Filter by friends of the authenticated athlete. (optional)
     * @param  int $club_id Filter by club. (optional)
     * @param  string $date_range Filter by date range, will be in the athlete&#39;s timezone (optional)
     * @param  int $context_entries (optional)
     * @param  int $page Page number. (optional)
     * @param  int $per_page Number of items per page. Defaults to 30. (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeaderboardBySegmentIdAsync($id, $gender = null, $age_group = null, $weight_class = null, $following = null, $club_id = null, $date_range = null, $context_entries = null, $page = null, $per_page = '30')
    {
        return $this->getLeaderboardBySegmentIdAsyncWithHttpInfo($id, $gender, $age_group, $weight_class, $following, $club_id, $date_range, $context_entries, $page, $per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLeaderboardBySegmentIdAsyncWithHttpInfo
     *
     * Get Segment Leaderboard
     *
     * @param  int $id The identifier of the segment leaderboard. (required)
     * @param  string $gender Filter by gender. (optional)
     * @param  string $age_group Summit Feature. Filter by age group. (optional)
     * @param  string $weight_class Summit Feature. Filter by weight class. (optional)
     * @param  bool $following Filter by friends of the authenticated athlete. (optional)
     * @param  int $club_id Filter by club. (optional)
     * @param  string $date_range Filter by date range, will be in the athlete&#39;s timezone (optional)
     * @param  int $context_entries (optional)
     * @param  int $page Page number. (optional)
     * @param  int $per_page Number of items per page. Defaults to 30. (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeaderboardBySegmentIdAsyncWithHttpInfo($id, $gender = null, $age_group = null, $weight_class = null, $following = null, $club_id = null, $date_range = null, $context_entries = null, $page = null, $per_page = '30')
    {
        $returnType = '\Swagger\Client\Model\SegmentLeaderboard';
        $request = $this->getLeaderboardBySegmentIdRequest($id, $gender, $age_group, $weight_class, $following, $club_id, $date_range, $context_entries, $page, $per_page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLeaderboardBySegmentId'
     *
     * @param  int $id The identifier of the segment leaderboard. (required)
     * @param  string $gender Filter by gender. (optional)
     * @param  string $age_group Summit Feature. Filter by age group. (optional)
     * @param  string $weight_class Summit Feature. Filter by weight class. (optional)
     * @param  bool $following Filter by friends of the authenticated athlete. (optional)
     * @param  int $club_id Filter by club. (optional)
     * @param  string $date_range Filter by date range, will be in the athlete&#39;s timezone (optional)
     * @param  int $context_entries (optional)
     * @param  int $page Page number. (optional)
     * @param  int $per_page Number of items per page. Defaults to 30. (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLeaderboardBySegmentIdRequest($id, $gender = null, $age_group = null, $weight_class = null, $following = null, $club_id = null, $date_range = null, $context_entries = null, $page = null, $per_page = '30')
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLeaderboardBySegmentId'
            );
        }

        $resourcePath = '/segments/{id}/leaderboard';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gender !== null) {
            $queryParams['gender'] = ObjectSerializer::toQueryValue($gender);
        }
        // query params
        if ($age_group !== null) {
            $queryParams['age_group'] = ObjectSerializer::toQueryValue($age_group);
        }
        // query params
        if ($weight_class !== null) {
            $queryParams['weight_class'] = ObjectSerializer::toQueryValue($weight_class);
        }
        // query params
        if ($following !== null) {
            $queryParams['following'] = ObjectSerializer::toQueryValue($following);
        }
        // query params
        if ($club_id !== null) {
            $queryParams['club_id'] = ObjectSerializer::toQueryValue($club_id);
        }
        // query params
        if ($date_range !== null) {
            $queryParams['date_range'] = ObjectSerializer::toQueryValue($date_range);
        }
        // query params
        if ($context_entries !== null) {
            $queryParams['context_entries'] = ObjectSerializer::toQueryValue($context_entries);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLoggedInAthleteStarredSegments
     *
     * List Starred Segments
     *
     * @param  int $page Page number. (optional)
     * @param  int $per_page Number of items per page. Defaults to 30. (optional, default to 30)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SummarySegment[]
     */
    public function getLoggedInAthleteStarredSegments($page = null, $per_page = '30')
    {
        list($response) = $this->getLoggedInAthleteStarredSegmentsWithHttpInfo($page, $per_page);
        return $response;
    }

    /**
     * Operation getLoggedInAthleteStarredSegmentsWithHttpInfo
     *
     * List Starred Segments
     *
     * @param  int $page Page number. (optional)
     * @param  int $per_page Number of items per page. Defaults to 30. (optional, default to 30)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SummarySegment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getLoggedInAthleteStarredSegmentsWithHttpInfo($page = null, $per_page = '30')
    {
        $returnType = '\Swagger\Client\Model\SummarySegment[]';
        $request = $this->getLoggedInAthleteStarredSegmentsRequest($page, $per_page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SummarySegment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Fault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLoggedInAthleteStarredSegmentsAsync
     *
     * List Starred Segments
     *
     * @param  int $page Page number. (optional)
     * @param  int $per_page Number of items per page. Defaults to 30. (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLoggedInAthleteStarredSegmentsAsync($page = null, $per_page = '30')
    {
        return $this->getLoggedInAthleteStarredSegmentsAsyncWithHttpInfo($page, $per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLoggedInAthleteStarredSegmentsAsyncWithHttpInfo
     *
     * List Starred Segments
     *
     * @param  int $page Page number. (optional)
     * @param  int $per_page Number of items per page. Defaults to 30. (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLoggedInAthleteStarredSegmentsAsyncWithHttpInfo($page = null, $per_page = '30')
    {
        $returnType = '\Swagger\Client\Model\SummarySegment[]';
        $request = $this->getLoggedInAthleteStarredSegmentsRequest($page, $per_page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLoggedInAthleteStarredSegments'
     *
     * @param  int $page Page number. (optional)
     * @param  int $per_page Number of items per page. Defaults to 30. (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLoggedInAthleteStarredSegmentsRequest($page = null, $per_page = '30')
    {

        $resourcePath = '/segments/starred';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSegmentById
     *
     * Get Segment
     *
     * @param  int $id The identifier of the segment. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DetailedSegment
     */
    public function getSegmentById($id)
    {
        list($response) = $this->getSegmentByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getSegmentByIdWithHttpInfo
     *
     * Get Segment
     *
     * @param  int $id The identifier of the segment. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DetailedSegment, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSegmentByIdWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\DetailedSegment';
        $request = $this->getSegmentByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DetailedSegment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Fault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSegmentByIdAsync
     *
     * Get Segment
     *
     * @param  int $id The identifier of the segment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSegmentByIdAsync($id)
    {
        return $this->getSegmentByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSegmentByIdAsyncWithHttpInfo
     *
     * Get Segment
     *
     * @param  int $id The identifier of the segment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSegmentByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\DetailedSegment';
        $request = $this->getSegmentByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSegmentById'
     *
     * @param  int $id The identifier of the segment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSegmentByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getSegmentById'
            );
        }

        $resourcePath = '/segments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation starSegment
     *
     * Star Segment
     *
     * @param  int $id The identifier of the segment to star. (required)
     * @param  bool $starred If true, star the segment; if false, unstar the segment. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DetailedSegment
     */
    public function starSegment($id, $starred)
    {
        list($response) = $this->starSegmentWithHttpInfo($id, $starred);
        return $response;
    }

    /**
     * Operation starSegmentWithHttpInfo
     *
     * Star Segment
     *
     * @param  int $id The identifier of the segment to star. (required)
     * @param  bool $starred If true, star the segment; if false, unstar the segment. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DetailedSegment, HTTP status code, HTTP response headers (array of strings)
     */
    public function starSegmentWithHttpInfo($id, $starred)
    {
        $returnType = '\Swagger\Client\Model\DetailedSegment';
        $request = $this->starSegmentRequest($id, $starred);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DetailedSegment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Fault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation starSegmentAsync
     *
     * Star Segment
     *
     * @param  int $id The identifier of the segment to star. (required)
     * @param  bool $starred If true, star the segment; if false, unstar the segment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function starSegmentAsync($id, $starred)
    {
        return $this->starSegmentAsyncWithHttpInfo($id, $starred)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation starSegmentAsyncWithHttpInfo
     *
     * Star Segment
     *
     * @param  int $id The identifier of the segment to star. (required)
     * @param  bool $starred If true, star the segment; if false, unstar the segment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function starSegmentAsyncWithHttpInfo($id, $starred)
    {
        $returnType = '\Swagger\Client\Model\DetailedSegment';
        $request = $this->starSegmentRequest($id, $starred);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'starSegment'
     *
     * @param  int $id The identifier of the segment to star. (required)
     * @param  bool $starred If true, star the segment; if false, unstar the segment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function starSegmentRequest($id, $starred)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling starSegment'
            );
        }
        // verify the required parameter 'starred' is set
        if ($starred === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $starred when calling starSegment'
            );
        }

        $resourcePath = '/segments/{id}/starred';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($starred !== null) {
            $formParams['starred'] = ObjectSerializer::toFormValue($starred);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
