<?php
/**
 * SummaryClub
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SummaryClub Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SummaryClub implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SummaryClub';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'resource_state' => 'int',
        'name' => 'string',
        'profile_medium' => 'string',
        'cover_photo' => 'string',
        'cover_photo_small' => 'string',
        'sport_type' => 'string',
        'city' => 'string',
        'state' => 'string',
        'country' => 'string',
        'private' => 'bool',
        'member_count' => 'int',
        'featured' => 'bool',
        'verified' => 'bool',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'resource_state' => null,
        'name' => null,
        'profile_medium' => null,
        'cover_photo' => null,
        'cover_photo_small' => null,
        'sport_type' => null,
        'city' => null,
        'state' => null,
        'country' => null,
        'private' => null,
        'member_count' => null,
        'featured' => null,
        'verified' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'resource_state' => 'resource_state',
        'name' => 'name',
        'profile_medium' => 'profile_medium',
        'cover_photo' => 'cover_photo',
        'cover_photo_small' => 'cover_photo_small',
        'sport_type' => 'sport_type',
        'city' => 'city',
        'state' => 'state',
        'country' => 'country',
        'private' => 'private',
        'member_count' => 'member_count',
        'featured' => 'featured',
        'verified' => 'verified',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'resource_state' => 'setResourceState',
        'name' => 'setName',
        'profile_medium' => 'setProfileMedium',
        'cover_photo' => 'setCoverPhoto',
        'cover_photo_small' => 'setCoverPhotoSmall',
        'sport_type' => 'setSportType',
        'city' => 'setCity',
        'state' => 'setState',
        'country' => 'setCountry',
        'private' => 'setPrivate',
        'member_count' => 'setMemberCount',
        'featured' => 'setFeatured',
        'verified' => 'setVerified',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'resource_state' => 'getResourceState',
        'name' => 'getName',
        'profile_medium' => 'getProfileMedium',
        'cover_photo' => 'getCoverPhoto',
        'cover_photo_small' => 'getCoverPhotoSmall',
        'sport_type' => 'getSportType',
        'city' => 'getCity',
        'state' => 'getState',
        'country' => 'getCountry',
        'private' => 'getPrivate',
        'member_count' => 'getMemberCount',
        'featured' => 'getFeatured',
        'verified' => 'getVerified',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SPORT_TYPE_CYCLING = 'cycling';
    const SPORT_TYPE_RUNNING = 'running';
    const SPORT_TYPE_TRIATHLON = 'triathlon';
    const SPORT_TYPE_OTHER = 'other';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSportTypeAllowableValues()
    {
        return [
            self::SPORT_TYPE_CYCLING,
            self::SPORT_TYPE_RUNNING,
            self::SPORT_TYPE_TRIATHLON,
            self::SPORT_TYPE_OTHER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['resource_state'] = isset($data['resource_state']) ? $data['resource_state'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['profile_medium'] = isset($data['profile_medium']) ? $data['profile_medium'] : null;
        $this->container['cover_photo'] = isset($data['cover_photo']) ? $data['cover_photo'] : null;
        $this->container['cover_photo_small'] = isset($data['cover_photo_small']) ? $data['cover_photo_small'] : null;
        $this->container['sport_type'] = isset($data['sport_type']) ? $data['sport_type'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['private'] = isset($data['private']) ? $data['private'] : null;
        $this->container['member_count'] = isset($data['member_count']) ? $data['member_count'] : null;
        $this->container['featured'] = isset($data['featured']) ? $data['featured'] : null;
        $this->container['verified'] = isset($data['verified']) ? $data['verified'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSportTypeAllowableValues();
        if (!in_array($this->container['sport_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sport_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getSportTypeAllowableValues();
        if (!in_array($this->container['sport_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The club's unique identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets resource_state
     *
     * @return int
     */
    public function getResourceState()
    {
        return $this->container['resource_state'];
    }

    /**
     * Sets resource_state
     *
     * @param int $resource_state Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"
     *
     * @return $this
     */
    public function setResourceState($resource_state)
    {
        $this->container['resource_state'] = $resource_state;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The club's name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets profile_medium
     *
     * @return string
     */
    public function getProfileMedium()
    {
        return $this->container['profile_medium'];
    }

    /**
     * Sets profile_medium
     *
     * @param string $profile_medium URL to a 60x60 pixel profile picture.
     *
     * @return $this
     */
    public function setProfileMedium($profile_medium)
    {
        $this->container['profile_medium'] = $profile_medium;

        return $this;
    }

    /**
     * Gets cover_photo
     *
     * @return string
     */
    public function getCoverPhoto()
    {
        return $this->container['cover_photo'];
    }

    /**
     * Sets cover_photo
     *
     * @param string $cover_photo URL to a ~1185x580 pixel cover photo.
     *
     * @return $this
     */
    public function setCoverPhoto($cover_photo)
    {
        $this->container['cover_photo'] = $cover_photo;

        return $this;
    }

    /**
     * Gets cover_photo_small
     *
     * @return string
     */
    public function getCoverPhotoSmall()
    {
        return $this->container['cover_photo_small'];
    }

    /**
     * Sets cover_photo_small
     *
     * @param string $cover_photo_small URL to a ~360x176  pixel cover photo.
     *
     * @return $this
     */
    public function setCoverPhotoSmall($cover_photo_small)
    {
        $this->container['cover_photo_small'] = $cover_photo_small;

        return $this;
    }

    /**
     * Gets sport_type
     *
     * @return string
     */
    public function getSportType()
    {
        return $this->container['sport_type'];
    }

    /**
     * Sets sport_type
     *
     * @param string $sport_type sport_type
     *
     * @return $this
     */
    public function setSportType($sport_type)
    {
        $allowedValues = $this->getSportTypeAllowableValues();
        if (!is_null($sport_type) && !in_array($sport_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sport_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sport_type'] = $sport_type;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The club's city.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The club's state or geographical region.
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The club's country.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool $private Whether the club is private.
     *
     * @return $this
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets member_count
     *
     * @return int
     */
    public function getMemberCount()
    {
        return $this->container['member_count'];
    }

    /**
     * Sets member_count
     *
     * @param int $member_count The club's member count.
     *
     * @return $this
     */
    public function setMemberCount($member_count)
    {
        $this->container['member_count'] = $member_count;

        return $this;
    }

    /**
     * Gets featured
     *
     * @return bool
     */
    public function getFeatured()
    {
        return $this->container['featured'];
    }

    /**
     * Sets featured
     *
     * @param bool $featured Whether the club is featured or not.
     *
     * @return $this
     */
    public function setFeatured($featured)
    {
        $this->container['featured'] = $featured;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool $verified Whether the club is verified or not.
     *
     * @return $this
     */
    public function setVerified($verified)
    {
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The club's vanity URL.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


