<?php
/**
 * ActivityTotal
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ActivityTotal Class Doc Comment
 *
 * @category Class
 * @description A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActivityTotal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ActivityTotal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'count' => 'int',
        'distance' => 'float',
        'moving_time' => 'int',
        'elapsed_time' => 'int',
        'elevation_gain' => 'float',
        'achievement_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'count' => null,
        'distance' => 'float',
        'moving_time' => null,
        'elapsed_time' => null,
        'elevation_gain' => 'float',
        'achievement_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'count' => 'count',
        'distance' => 'distance',
        'moving_time' => 'moving_time',
        'elapsed_time' => 'elapsed_time',
        'elevation_gain' => 'elevation_gain',
        'achievement_count' => 'achievement_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'count' => 'setCount',
        'distance' => 'setDistance',
        'moving_time' => 'setMovingTime',
        'elapsed_time' => 'setElapsedTime',
        'elevation_gain' => 'setElevationGain',
        'achievement_count' => 'setAchievementCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'count' => 'getCount',
        'distance' => 'getDistance',
        'moving_time' => 'getMovingTime',
        'elapsed_time' => 'getElapsedTime',
        'elevation_gain' => 'getElevationGain',
        'achievement_count' => 'getAchievementCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['moving_time'] = isset($data['moving_time']) ? $data['moving_time'] : null;
        $this->container['elapsed_time'] = isset($data['elapsed_time']) ? $data['elapsed_time'] : null;
        $this->container['elevation_gain'] = isset($data['elevation_gain']) ? $data['elevation_gain'] : null;
        $this->container['achievement_count'] = isset($data['achievement_count']) ? $data['achievement_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count The number of activities considered in this total.
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return float
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param float $distance The total distance covered by the considered activities.
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets moving_time
     *
     * @return int
     */
    public function getMovingTime()
    {
        return $this->container['moving_time'];
    }

    /**
     * Sets moving_time
     *
     * @param int $moving_time The total moving time of the considered activities.
     *
     * @return $this
     */
    public function setMovingTime($moving_time)
    {
        $this->container['moving_time'] = $moving_time;

        return $this;
    }

    /**
     * Gets elapsed_time
     *
     * @return int
     */
    public function getElapsedTime()
    {
        return $this->container['elapsed_time'];
    }

    /**
     * Sets elapsed_time
     *
     * @param int $elapsed_time The total elapsed time of the considered activities.
     *
     * @return $this
     */
    public function setElapsedTime($elapsed_time)
    {
        $this->container['elapsed_time'] = $elapsed_time;

        return $this;
    }

    /**
     * Gets elevation_gain
     *
     * @return float
     */
    public function getElevationGain()
    {
        return $this->container['elevation_gain'];
    }

    /**
     * Sets elevation_gain
     *
     * @param float $elevation_gain The total elevation gain of the considered activities.
     *
     * @return $this
     */
    public function setElevationGain($elevation_gain)
    {
        $this->container['elevation_gain'] = $elevation_gain;

        return $this;
    }

    /**
     * Gets achievement_count
     *
     * @return int
     */
    public function getAchievementCount()
    {
        return $this->container['achievement_count'];
    }

    /**
     * Sets achievement_count
     *
     * @param int $achievement_count The total number of achievements of the considered activities.
     *
     * @return $this
     */
    public function setAchievementCount($achievement_count)
    {
        $this->container['achievement_count'] = $achievement_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


