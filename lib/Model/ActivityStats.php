<?php
/**
 * ActivityStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ActivityStats Class Doc Comment
 *
 * @category Class
 * @description A set of rolled-up statistics and totals for an athlete
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActivityStats implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ActivityStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'biggest_ride_distance' => 'double',
        'biggest_climb_elevation_gain' => 'double',
        'recent_ride_totals' => '\Swagger\Client\Model\ActivityTotal',
        'recent_run_totals' => '\Swagger\Client\Model\ActivityTotal',
        'recent_swim_totals' => '\Swagger\Client\Model\ActivityTotal',
        'ytd_ride_totals' => '\Swagger\Client\Model\ActivityTotal',
        'ytd_run_totals' => '\Swagger\Client\Model\ActivityTotal',
        'ytd_swim_totals' => '\Swagger\Client\Model\ActivityTotal',
        'all_ride_totals' => '\Swagger\Client\Model\ActivityTotal',
        'all_run_totals' => '\Swagger\Client\Model\ActivityTotal',
        'all_swim_totals' => '\Swagger\Client\Model\ActivityTotal'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'biggest_ride_distance' => 'double',
        'biggest_climb_elevation_gain' => 'double',
        'recent_ride_totals' => null,
        'recent_run_totals' => null,
        'recent_swim_totals' => null,
        'ytd_ride_totals' => null,
        'ytd_run_totals' => null,
        'ytd_swim_totals' => null,
        'all_ride_totals' => null,
        'all_run_totals' => null,
        'all_swim_totals' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'biggest_ride_distance' => 'biggest_ride_distance',
        'biggest_climb_elevation_gain' => 'biggest_climb_elevation_gain',
        'recent_ride_totals' => 'recent_ride_totals',
        'recent_run_totals' => 'recent_run_totals',
        'recent_swim_totals' => 'recent_swim_totals',
        'ytd_ride_totals' => 'ytd_ride_totals',
        'ytd_run_totals' => 'ytd_run_totals',
        'ytd_swim_totals' => 'ytd_swim_totals',
        'all_ride_totals' => 'all_ride_totals',
        'all_run_totals' => 'all_run_totals',
        'all_swim_totals' => 'all_swim_totals'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'biggest_ride_distance' => 'setBiggestRideDistance',
        'biggest_climb_elevation_gain' => 'setBiggestClimbElevationGain',
        'recent_ride_totals' => 'setRecentRideTotals',
        'recent_run_totals' => 'setRecentRunTotals',
        'recent_swim_totals' => 'setRecentSwimTotals',
        'ytd_ride_totals' => 'setYtdRideTotals',
        'ytd_run_totals' => 'setYtdRunTotals',
        'ytd_swim_totals' => 'setYtdSwimTotals',
        'all_ride_totals' => 'setAllRideTotals',
        'all_run_totals' => 'setAllRunTotals',
        'all_swim_totals' => 'setAllSwimTotals'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'biggest_ride_distance' => 'getBiggestRideDistance',
        'biggest_climb_elevation_gain' => 'getBiggestClimbElevationGain',
        'recent_ride_totals' => 'getRecentRideTotals',
        'recent_run_totals' => 'getRecentRunTotals',
        'recent_swim_totals' => 'getRecentSwimTotals',
        'ytd_ride_totals' => 'getYtdRideTotals',
        'ytd_run_totals' => 'getYtdRunTotals',
        'ytd_swim_totals' => 'getYtdSwimTotals',
        'all_ride_totals' => 'getAllRideTotals',
        'all_run_totals' => 'getAllRunTotals',
        'all_swim_totals' => 'getAllSwimTotals'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['biggest_ride_distance'] = isset($data['biggest_ride_distance']) ? $data['biggest_ride_distance'] : null;
        $this->container['biggest_climb_elevation_gain'] = isset($data['biggest_climb_elevation_gain']) ? $data['biggest_climb_elevation_gain'] : null;
        $this->container['recent_ride_totals'] = isset($data['recent_ride_totals']) ? $data['recent_ride_totals'] : null;
        $this->container['recent_run_totals'] = isset($data['recent_run_totals']) ? $data['recent_run_totals'] : null;
        $this->container['recent_swim_totals'] = isset($data['recent_swim_totals']) ? $data['recent_swim_totals'] : null;
        $this->container['ytd_ride_totals'] = isset($data['ytd_ride_totals']) ? $data['ytd_ride_totals'] : null;
        $this->container['ytd_run_totals'] = isset($data['ytd_run_totals']) ? $data['ytd_run_totals'] : null;
        $this->container['ytd_swim_totals'] = isset($data['ytd_swim_totals']) ? $data['ytd_swim_totals'] : null;
        $this->container['all_ride_totals'] = isset($data['all_ride_totals']) ? $data['all_ride_totals'] : null;
        $this->container['all_run_totals'] = isset($data['all_run_totals']) ? $data['all_run_totals'] : null;
        $this->container['all_swim_totals'] = isset($data['all_swim_totals']) ? $data['all_swim_totals'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets biggest_ride_distance
     *
     * @return double
     */
    public function getBiggestRideDistance()
    {
        return $this->container['biggest_ride_distance'];
    }

    /**
     * Sets biggest_ride_distance
     *
     * @param double $biggest_ride_distance The longest distance ridden by the athlete.
     *
     * @return $this
     */
    public function setBiggestRideDistance($biggest_ride_distance)
    {
        $this->container['biggest_ride_distance'] = $biggest_ride_distance;

        return $this;
    }

    /**
     * Gets biggest_climb_elevation_gain
     *
     * @return double
     */
    public function getBiggestClimbElevationGain()
    {
        return $this->container['biggest_climb_elevation_gain'];
    }

    /**
     * Sets biggest_climb_elevation_gain
     *
     * @param double $biggest_climb_elevation_gain The highest climb ridden by the athlete.
     *
     * @return $this
     */
    public function setBiggestClimbElevationGain($biggest_climb_elevation_gain)
    {
        $this->container['biggest_climb_elevation_gain'] = $biggest_climb_elevation_gain;

        return $this;
    }

    /**
     * Gets recent_ride_totals
     *
     * @return \Swagger\Client\Model\ActivityTotal
     */
    public function getRecentRideTotals()
    {
        return $this->container['recent_ride_totals'];
    }

    /**
     * Sets recent_ride_totals
     *
     * @param \Swagger\Client\Model\ActivityTotal $recent_ride_totals The recent (last 4 weeks) ride stats for the athlete.
     *
     * @return $this
     */
    public function setRecentRideTotals($recent_ride_totals)
    {
        $this->container['recent_ride_totals'] = $recent_ride_totals;

        return $this;
    }

    /**
     * Gets recent_run_totals
     *
     * @return \Swagger\Client\Model\ActivityTotal
     */
    public function getRecentRunTotals()
    {
        return $this->container['recent_run_totals'];
    }

    /**
     * Sets recent_run_totals
     *
     * @param \Swagger\Client\Model\ActivityTotal $recent_run_totals The recent (last 4 weeks) run stats for the athlete.
     *
     * @return $this
     */
    public function setRecentRunTotals($recent_run_totals)
    {
        $this->container['recent_run_totals'] = $recent_run_totals;

        return $this;
    }

    /**
     * Gets recent_swim_totals
     *
     * @return \Swagger\Client\Model\ActivityTotal
     */
    public function getRecentSwimTotals()
    {
        return $this->container['recent_swim_totals'];
    }

    /**
     * Sets recent_swim_totals
     *
     * @param \Swagger\Client\Model\ActivityTotal $recent_swim_totals The recent (last 4 weeks) swim stats for the athlete.
     *
     * @return $this
     */
    public function setRecentSwimTotals($recent_swim_totals)
    {
        $this->container['recent_swim_totals'] = $recent_swim_totals;

        return $this;
    }

    /**
     * Gets ytd_ride_totals
     *
     * @return \Swagger\Client\Model\ActivityTotal
     */
    public function getYtdRideTotals()
    {
        return $this->container['ytd_ride_totals'];
    }

    /**
     * Sets ytd_ride_totals
     *
     * @param \Swagger\Client\Model\ActivityTotal $ytd_ride_totals The year to date ride stats for the athlete.
     *
     * @return $this
     */
    public function setYtdRideTotals($ytd_ride_totals)
    {
        $this->container['ytd_ride_totals'] = $ytd_ride_totals;

        return $this;
    }

    /**
     * Gets ytd_run_totals
     *
     * @return \Swagger\Client\Model\ActivityTotal
     */
    public function getYtdRunTotals()
    {
        return $this->container['ytd_run_totals'];
    }

    /**
     * Sets ytd_run_totals
     *
     * @param \Swagger\Client\Model\ActivityTotal $ytd_run_totals The year to date run stats for the athlete.
     *
     * @return $this
     */
    public function setYtdRunTotals($ytd_run_totals)
    {
        $this->container['ytd_run_totals'] = $ytd_run_totals;

        return $this;
    }

    /**
     * Gets ytd_swim_totals
     *
     * @return \Swagger\Client\Model\ActivityTotal
     */
    public function getYtdSwimTotals()
    {
        return $this->container['ytd_swim_totals'];
    }

    /**
     * Sets ytd_swim_totals
     *
     * @param \Swagger\Client\Model\ActivityTotal $ytd_swim_totals The year to date swim stats for the athlete.
     *
     * @return $this
     */
    public function setYtdSwimTotals($ytd_swim_totals)
    {
        $this->container['ytd_swim_totals'] = $ytd_swim_totals;

        return $this;
    }

    /**
     * Gets all_ride_totals
     *
     * @return \Swagger\Client\Model\ActivityTotal
     */
    public function getAllRideTotals()
    {
        return $this->container['all_ride_totals'];
    }

    /**
     * Sets all_ride_totals
     *
     * @param \Swagger\Client\Model\ActivityTotal $all_ride_totals The all time ride stats for the athlete.
     *
     * @return $this
     */
    public function setAllRideTotals($all_ride_totals)
    {
        $this->container['all_ride_totals'] = $all_ride_totals;

        return $this;
    }

    /**
     * Gets all_run_totals
     *
     * @return \Swagger\Client\Model\ActivityTotal
     */
    public function getAllRunTotals()
    {
        return $this->container['all_run_totals'];
    }

    /**
     * Sets all_run_totals
     *
     * @param \Swagger\Client\Model\ActivityTotal $all_run_totals The all time run stats for the athlete.
     *
     * @return $this
     */
    public function setAllRunTotals($all_run_totals)
    {
        $this->container['all_run_totals'] = $all_run_totals;

        return $this;
    }

    /**
     * Gets all_swim_totals
     *
     * @return \Swagger\Client\Model\ActivityTotal
     */
    public function getAllSwimTotals()
    {
        return $this->container['all_swim_totals'];
    }

    /**
     * Sets all_swim_totals
     *
     * @param \Swagger\Client\Model\ActivityTotal $all_swim_totals The all time swim stats for the athlete.
     *
     * @return $this
     */
    public function setAllSwimTotals($all_swim_totals)
    {
        $this->container['all_swim_totals'] = $all_swim_totals;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


