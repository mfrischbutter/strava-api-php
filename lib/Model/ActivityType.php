<?php
/**
 * ActivityType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ActivityType Class Doc Comment
 *
 * @category Class
 * @description An enumeration of the types an activity may have.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActivityType
{
    /**
     * Possible values of this enum
     */
    const ALPINE_SKI = 'AlpineSki';
    const BACKCOUNTRY_SKI = 'BackcountrySki';
    const CANOEING = 'Canoeing';
    const CROSSFIT = 'Crossfit';
    const E_BIKE_RIDE = 'EBikeRide';
    const ELLIPTICAL = 'Elliptical';
    const GOLF = 'Golf';
    const HANDCYCLE = 'Handcycle';
    const HIKE = 'Hike';
    const ICE_SKATE = 'IceSkate';
    const INLINE_SKATE = 'InlineSkate';
    const KAYAKING = 'Kayaking';
    const KITESURF = 'Kitesurf';
    const NORDIC_SKI = 'NordicSki';
    const RIDE = 'Ride';
    const ROCK_CLIMBING = 'RockClimbing';
    const ROLLER_SKI = 'RollerSki';
    const ROWING = 'Rowing';
    const RUN = 'Run';
    const SAIL = 'Sail';
    const SKATEBOARD = 'Skateboard';
    const SNOWBOARD = 'Snowboard';
    const SNOWSHOE = 'Snowshoe';
    const SOCCER = 'Soccer';
    const STAIR_STEPPER = 'StairStepper';
    const STAND_UP_PADDLING = 'StandUpPaddling';
    const SURFING = 'Surfing';
    const SWIM = 'Swim';
    const VELOMOBILE = 'Velomobile';
    const VIRTUAL_RIDE = 'VirtualRide';
    const VIRTUAL_RUN = 'VirtualRun';
    const WALK = 'Walk';
    const WEIGHT_TRAINING = 'WeightTraining';
    const WHEELCHAIR = 'Wheelchair';
    const WINDSURF = 'Windsurf';
    const WORKOUT = 'Workout';
    const YOGA = 'Yoga';
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::ALPINE_SKI,
            self::BACKCOUNTRY_SKI,
            self::CANOEING,
            self::CROSSFIT,
            self::E_BIKE_RIDE,
            self::ELLIPTICAL,
            self::GOLF,
            self::HANDCYCLE,
            self::HIKE,
            self::ICE_SKATE,
            self::INLINE_SKATE,
            self::KAYAKING,
            self::KITESURF,
            self::NORDIC_SKI,
            self::RIDE,
            self::ROCK_CLIMBING,
            self::ROLLER_SKI,
            self::ROWING,
            self::RUN,
            self::SAIL,
            self::SKATEBOARD,
            self::SNOWBOARD,
            self::SNOWSHOE,
            self::SOCCER,
            self::STAIR_STEPPER,
            self::STAND_UP_PADDLING,
            self::SURFING,
            self::SWIM,
            self::VELOMOBILE,
            self::VIRTUAL_RIDE,
            self::VIRTUAL_RUN,
            self::WALK,
            self::WEIGHT_TRAINING,
            self::WHEELCHAIR,
            self::WINDSURF,
            self::WORKOUT,
            self::YOGA,
        ];
    }
}


