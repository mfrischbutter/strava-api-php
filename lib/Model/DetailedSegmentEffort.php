<?php
/**
 * DetailedSegmentEffort
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DetailedSegmentEffort Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DetailedSegmentEffort implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DetailedSegmentEffort';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'elapsed_time' => 'int',
        'start_date' => '\DateTime',
        'start_date_local' => '\DateTime',
        'distance' => 'float',
        'is_kom' => 'bool',
        'name' => 'string',
        'activity' => '\Swagger\Client\Model\MetaActivity',
        'athlete' => '\Swagger\Client\Model\MetaAthlete',
        'moving_time' => 'int',
        'start_index' => 'int',
        'end_index' => 'int',
        'average_cadence' => 'float',
        'average_watts' => 'float',
        'device_watts' => 'bool',
        'average_heartrate' => 'float',
        'max_heartrate' => 'float',
        'segment' => '\Swagger\Client\Model\SummarySegment',
        'kom_rank' => 'int',
        'pr_rank' => 'int',
        'hidden' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'elapsed_time' => null,
        'start_date' => 'date-time',
        'start_date_local' => 'date-time',
        'distance' => 'float',
        'is_kom' => null,
        'name' => null,
        'activity' => null,
        'athlete' => null,
        'moving_time' => null,
        'start_index' => null,
        'end_index' => null,
        'average_cadence' => 'float',
        'average_watts' => 'float',
        'device_watts' => null,
        'average_heartrate' => 'float',
        'max_heartrate' => 'float',
        'segment' => null,
        'kom_rank' => null,
        'pr_rank' => null,
        'hidden' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'elapsed_time' => 'elapsed_time',
        'start_date' => 'start_date',
        'start_date_local' => 'start_date_local',
        'distance' => 'distance',
        'is_kom' => 'is_kom',
        'name' => 'name',
        'activity' => 'activity',
        'athlete' => 'athlete',
        'moving_time' => 'moving_time',
        'start_index' => 'start_index',
        'end_index' => 'end_index',
        'average_cadence' => 'average_cadence',
        'average_watts' => 'average_watts',
        'device_watts' => 'device_watts',
        'average_heartrate' => 'average_heartrate',
        'max_heartrate' => 'max_heartrate',
        'segment' => 'segment',
        'kom_rank' => 'kom_rank',
        'pr_rank' => 'pr_rank',
        'hidden' => 'hidden'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'elapsed_time' => 'setElapsedTime',
        'start_date' => 'setStartDate',
        'start_date_local' => 'setStartDateLocal',
        'distance' => 'setDistance',
        'is_kom' => 'setIsKom',
        'name' => 'setName',
        'activity' => 'setActivity',
        'athlete' => 'setAthlete',
        'moving_time' => 'setMovingTime',
        'start_index' => 'setStartIndex',
        'end_index' => 'setEndIndex',
        'average_cadence' => 'setAverageCadence',
        'average_watts' => 'setAverageWatts',
        'device_watts' => 'setDeviceWatts',
        'average_heartrate' => 'setAverageHeartrate',
        'max_heartrate' => 'setMaxHeartrate',
        'segment' => 'setSegment',
        'kom_rank' => 'setKomRank',
        'pr_rank' => 'setPrRank',
        'hidden' => 'setHidden'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'elapsed_time' => 'getElapsedTime',
        'start_date' => 'getStartDate',
        'start_date_local' => 'getStartDateLocal',
        'distance' => 'getDistance',
        'is_kom' => 'getIsKom',
        'name' => 'getName',
        'activity' => 'getActivity',
        'athlete' => 'getAthlete',
        'moving_time' => 'getMovingTime',
        'start_index' => 'getStartIndex',
        'end_index' => 'getEndIndex',
        'average_cadence' => 'getAverageCadence',
        'average_watts' => 'getAverageWatts',
        'device_watts' => 'getDeviceWatts',
        'average_heartrate' => 'getAverageHeartrate',
        'max_heartrate' => 'getMaxHeartrate',
        'segment' => 'getSegment',
        'kom_rank' => 'getKomRank',
        'pr_rank' => 'getPrRank',
        'hidden' => 'getHidden'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['elapsed_time'] = isset($data['elapsed_time']) ? $data['elapsed_time'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['start_date_local'] = isset($data['start_date_local']) ? $data['start_date_local'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['is_kom'] = isset($data['is_kom']) ? $data['is_kom'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['activity'] = isset($data['activity']) ? $data['activity'] : null;
        $this->container['athlete'] = isset($data['athlete']) ? $data['athlete'] : null;
        $this->container['moving_time'] = isset($data['moving_time']) ? $data['moving_time'] : null;
        $this->container['start_index'] = isset($data['start_index']) ? $data['start_index'] : null;
        $this->container['end_index'] = isset($data['end_index']) ? $data['end_index'] : null;
        $this->container['average_cadence'] = isset($data['average_cadence']) ? $data['average_cadence'] : null;
        $this->container['average_watts'] = isset($data['average_watts']) ? $data['average_watts'] : null;
        $this->container['device_watts'] = isset($data['device_watts']) ? $data['device_watts'] : null;
        $this->container['average_heartrate'] = isset($data['average_heartrate']) ? $data['average_heartrate'] : null;
        $this->container['max_heartrate'] = isset($data['max_heartrate']) ? $data['max_heartrate'] : null;
        $this->container['segment'] = isset($data['segment']) ? $data['segment'] : null;
        $this->container['kom_rank'] = isset($data['kom_rank']) ? $data['kom_rank'] : null;
        $this->container['pr_rank'] = isset($data['pr_rank']) ? $data['pr_rank'] : null;
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['kom_rank']) && ($this->container['kom_rank'] > 10)) {
            $invalidProperties[] = "invalid value for 'kom_rank', must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['kom_rank']) && ($this->container['kom_rank'] < 1)) {
            $invalidProperties[] = "invalid value for 'kom_rank', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pr_rank']) && ($this->container['pr_rank'] > 3)) {
            $invalidProperties[] = "invalid value for 'pr_rank', must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['pr_rank']) && ($this->container['pr_rank'] < 1)) {
            $invalidProperties[] = "invalid value for 'pr_rank', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['kom_rank'] > 10) {
            return false;
        }
        if ($this->container['kom_rank'] < 1) {
            return false;
        }
        if ($this->container['pr_rank'] > 3) {
            return false;
        }
        if ($this->container['pr_rank'] < 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier of this effort
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets elapsed_time
     *
     * @return int
     */
    public function getElapsedTime()
    {
        return $this->container['elapsed_time'];
    }

    /**
     * Sets elapsed_time
     *
     * @param int $elapsed_time The effort's elapsed time
     *
     * @return $this
     */
    public function setElapsedTime($elapsed_time)
    {
        $this->container['elapsed_time'] = $elapsed_time;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date The time at which the effort was started.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets start_date_local
     *
     * @return \DateTime
     */
    public function getStartDateLocal()
    {
        return $this->container['start_date_local'];
    }

    /**
     * Sets start_date_local
     *
     * @param \DateTime $start_date_local The time at which the effort was started in the local timezone.
     *
     * @return $this
     */
    public function setStartDateLocal($start_date_local)
    {
        $this->container['start_date_local'] = $start_date_local;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return float
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param float $distance The effort's distance in meters
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets is_kom
     *
     * @return bool
     */
    public function getIsKom()
    {
        return $this->container['is_kom'];
    }

    /**
     * Sets is_kom
     *
     * @param bool $is_kom Whether this effort is the current best on the leaderboard
     *
     * @return $this
     */
    public function setIsKom($is_kom)
    {
        $this->container['is_kom'] = $is_kom;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the segment on which this effort was performed
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets activity
     *
     * @return \Swagger\Client\Model\MetaActivity
     */
    public function getActivity()
    {
        return $this->container['activity'];
    }

    /**
     * Sets activity
     *
     * @param \Swagger\Client\Model\MetaActivity $activity activity
     *
     * @return $this
     */
    public function setActivity($activity)
    {
        $this->container['activity'] = $activity;

        return $this;
    }

    /**
     * Gets athlete
     *
     * @return \Swagger\Client\Model\MetaAthlete
     */
    public function getAthlete()
    {
        return $this->container['athlete'];
    }

    /**
     * Sets athlete
     *
     * @param \Swagger\Client\Model\MetaAthlete $athlete athlete
     *
     * @return $this
     */
    public function setAthlete($athlete)
    {
        $this->container['athlete'] = $athlete;

        return $this;
    }

    /**
     * Gets moving_time
     *
     * @return int
     */
    public function getMovingTime()
    {
        return $this->container['moving_time'];
    }

    /**
     * Sets moving_time
     *
     * @param int $moving_time The effort's moving time
     *
     * @return $this
     */
    public function setMovingTime($moving_time)
    {
        $this->container['moving_time'] = $moving_time;

        return $this;
    }

    /**
     * Gets start_index
     *
     * @return int
     */
    public function getStartIndex()
    {
        return $this->container['start_index'];
    }

    /**
     * Sets start_index
     *
     * @param int $start_index The start index of this effort in its activity's stream
     *
     * @return $this
     */
    public function setStartIndex($start_index)
    {
        $this->container['start_index'] = $start_index;

        return $this;
    }

    /**
     * Gets end_index
     *
     * @return int
     */
    public function getEndIndex()
    {
        return $this->container['end_index'];
    }

    /**
     * Sets end_index
     *
     * @param int $end_index The end index of this effort in its activity's stream
     *
     * @return $this
     */
    public function setEndIndex($end_index)
    {
        $this->container['end_index'] = $end_index;

        return $this;
    }

    /**
     * Gets average_cadence
     *
     * @return float
     */
    public function getAverageCadence()
    {
        return $this->container['average_cadence'];
    }

    /**
     * Sets average_cadence
     *
     * @param float $average_cadence The effort's average cadence
     *
     * @return $this
     */
    public function setAverageCadence($average_cadence)
    {
        $this->container['average_cadence'] = $average_cadence;

        return $this;
    }

    /**
     * Gets average_watts
     *
     * @return float
     */
    public function getAverageWatts()
    {
        return $this->container['average_watts'];
    }

    /**
     * Sets average_watts
     *
     * @param float $average_watts The average wattage of this effort
     *
     * @return $this
     */
    public function setAverageWatts($average_watts)
    {
        $this->container['average_watts'] = $average_watts;

        return $this;
    }

    /**
     * Gets device_watts
     *
     * @return bool
     */
    public function getDeviceWatts()
    {
        return $this->container['device_watts'];
    }

    /**
     * Sets device_watts
     *
     * @param bool $device_watts For riding efforts, whether the wattage was reported by a dedicated recording device
     *
     * @return $this
     */
    public function setDeviceWatts($device_watts)
    {
        $this->container['device_watts'] = $device_watts;

        return $this;
    }

    /**
     * Gets average_heartrate
     *
     * @return float
     */
    public function getAverageHeartrate()
    {
        return $this->container['average_heartrate'];
    }

    /**
     * Sets average_heartrate
     *
     * @param float $average_heartrate The heart heart rate of the athlete during this effort
     *
     * @return $this
     */
    public function setAverageHeartrate($average_heartrate)
    {
        $this->container['average_heartrate'] = $average_heartrate;

        return $this;
    }

    /**
     * Gets max_heartrate
     *
     * @return float
     */
    public function getMaxHeartrate()
    {
        return $this->container['max_heartrate'];
    }

    /**
     * Sets max_heartrate
     *
     * @param float $max_heartrate The maximum heart rate of the athlete during this effort
     *
     * @return $this
     */
    public function setMaxHeartrate($max_heartrate)
    {
        $this->container['max_heartrate'] = $max_heartrate;

        return $this;
    }

    /**
     * Gets segment
     *
     * @return \Swagger\Client\Model\SummarySegment
     */
    public function getSegment()
    {
        return $this->container['segment'];
    }

    /**
     * Sets segment
     *
     * @param \Swagger\Client\Model\SummarySegment $segment segment
     *
     * @return $this
     */
    public function setSegment($segment)
    {
        $this->container['segment'] = $segment;

        return $this;
    }

    /**
     * Gets kom_rank
     *
     * @return int
     */
    public function getKomRank()
    {
        return $this->container['kom_rank'];
    }

    /**
     * Sets kom_rank
     *
     * @param int $kom_rank The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload
     *
     * @return $this
     */
    public function setKomRank($kom_rank)
    {

        if (!is_null($kom_rank) && ($kom_rank > 10)) {
            throw new \InvalidArgumentException('invalid value for $kom_rank when calling DetailedSegmentEffort., must be smaller than or equal to 10.');
        }
        if (!is_null($kom_rank) && ($kom_rank < 1)) {
            throw new \InvalidArgumentException('invalid value for $kom_rank when calling DetailedSegmentEffort., must be bigger than or equal to 1.');
        }

        $this->container['kom_rank'] = $kom_rank;

        return $this;
    }

    /**
     * Gets pr_rank
     *
     * @return int
     */
    public function getPrRank()
    {
        return $this->container['pr_rank'];
    }

    /**
     * Sets pr_rank
     *
     * @param int $pr_rank The rank of the effort on the athlete's leaderboard if it belongs in the top 3 at the time of upload
     *
     * @return $this
     */
    public function setPrRank($pr_rank)
    {

        if (!is_null($pr_rank) && ($pr_rank > 3)) {
            throw new \InvalidArgumentException('invalid value for $pr_rank when calling DetailedSegmentEffort., must be smaller than or equal to 3.');
        }
        if (!is_null($pr_rank) && ($pr_rank < 1)) {
            throw new \InvalidArgumentException('invalid value for $pr_rank when calling DetailedSegmentEffort., must be bigger than or equal to 1.');
        }

        $this->container['pr_rank'] = $pr_rank;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool $hidden Whether this effort should be hidden when viewed within an activity
     *
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


