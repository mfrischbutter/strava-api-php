<?php
/**
 * Route
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Route Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Route implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Route';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'athlete' => '\Swagger\Client\Model\SummaryAthlete',
        'description' => 'string',
        'distance' => 'float',
        'elevation_gain' => 'float',
        'id' => 'int',
        'map' => '\Swagger\Client\Model\PolylineMap',
        'name' => 'string',
        'private' => 'bool',
        'starred' => 'bool',
        'timestamp' => 'int',
        'type' => 'int',
        'sub_type' => 'int',
        'segments' => '\Swagger\Client\Model\SummarySegment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'athlete' => null,
        'description' => null,
        'distance' => 'float',
        'elevation_gain' => 'float',
        'id' => null,
        'map' => null,
        'name' => null,
        'private' => null,
        'starred' => null,
        'timestamp' => null,
        'type' => null,
        'sub_type' => null,
        'segments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'athlete' => 'athlete',
        'description' => 'description',
        'distance' => 'distance',
        'elevation_gain' => 'elevation_gain',
        'id' => 'id',
        'map' => 'map',
        'name' => 'name',
        'private' => 'private',
        'starred' => 'starred',
        'timestamp' => 'timestamp',
        'type' => 'type',
        'sub_type' => 'sub_type',
        'segments' => 'segments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'athlete' => 'setAthlete',
        'description' => 'setDescription',
        'distance' => 'setDistance',
        'elevation_gain' => 'setElevationGain',
        'id' => 'setId',
        'map' => 'setMap',
        'name' => 'setName',
        'private' => 'setPrivate',
        'starred' => 'setStarred',
        'timestamp' => 'setTimestamp',
        'type' => 'setType',
        'sub_type' => 'setSubType',
        'segments' => 'setSegments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'athlete' => 'getAthlete',
        'description' => 'getDescription',
        'distance' => 'getDistance',
        'elevation_gain' => 'getElevationGain',
        'id' => 'getId',
        'map' => 'getMap',
        'name' => 'getName',
        'private' => 'getPrivate',
        'starred' => 'getStarred',
        'timestamp' => 'getTimestamp',
        'type' => 'getType',
        'sub_type' => 'getSubType',
        'segments' => 'getSegments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['athlete'] = isset($data['athlete']) ? $data['athlete'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['elevation_gain'] = isset($data['elevation_gain']) ? $data['elevation_gain'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['map'] = isset($data['map']) ? $data['map'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['private'] = isset($data['private']) ? $data['private'] : null;
        $this->container['starred'] = isset($data['starred']) ? $data['starred'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['sub_type'] = isset($data['sub_type']) ? $data['sub_type'] : null;
        $this->container['segments'] = isset($data['segments']) ? $data['segments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets athlete
     *
     * @return \Swagger\Client\Model\SummaryAthlete
     */
    public function getAthlete()
    {
        return $this->container['athlete'];
    }

    /**
     * Sets athlete
     *
     * @param \Swagger\Client\Model\SummaryAthlete $athlete athlete
     *
     * @return $this
     */
    public function setAthlete($athlete)
    {
        $this->container['athlete'] = $athlete;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the route
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return float
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param float $distance The route's distance, in meters
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets elevation_gain
     *
     * @return float
     */
    public function getElevationGain()
    {
        return $this->container['elevation_gain'];
    }

    /**
     * Sets elevation_gain
     *
     * @param float $elevation_gain The route's elevation gain.
     *
     * @return $this
     */
    public function setElevationGain($elevation_gain)
    {
        $this->container['elevation_gain'] = $elevation_gain;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier of this route
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets map
     *
     * @return \Swagger\Client\Model\PolylineMap
     */
    public function getMap()
    {
        return $this->container['map'];
    }

    /**
     * Sets map
     *
     * @param \Swagger\Client\Model\PolylineMap $map map
     *
     * @return $this
     */
    public function setMap($map)
    {
        $this->container['map'] = $map;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of this route
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool $private Whether this route is private
     *
     * @return $this
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets starred
     *
     * @return bool
     */
    public function getStarred()
    {
        return $this->container['starred'];
    }

    /**
     * Sets starred
     *
     * @param bool $starred Whether this route is starred by the logged-in athlete
     *
     * @return $this
     */
    public function setStarred($starred)
    {
        $this->container['starred'] = $starred;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int $timestamp An epoch timestamp of when the route was created
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type This route's type (1 for ride, 2 for runs)
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets sub_type
     *
     * @return int
     */
    public function getSubType()
    {
        return $this->container['sub_type'];
    }

    /**
     * Sets sub_type
     *
     * @param int $sub_type This route's sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)
     *
     * @return $this
     */
    public function setSubType($sub_type)
    {
        $this->container['sub_type'] = $sub_type;

        return $this;
    }

    /**
     * Gets segments
     *
     * @return \Swagger\Client\Model\SummarySegment[]
     */
    public function getSegments()
    {
        return $this->container['segments'];
    }

    /**
     * Sets segments
     *
     * @param \Swagger\Client\Model\SummarySegment[] $segments The segments traversed by this route
     *
     * @return $this
     */
    public function setSegments($segments)
    {
        $this->container['segments'] = $segments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


