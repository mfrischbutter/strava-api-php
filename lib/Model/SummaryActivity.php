<?php
/**
 * SummaryActivity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SummaryActivity Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SummaryActivity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SummaryActivity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'external_id' => 'string',
        'upload_id' => 'int',
        'athlete' => '\Swagger\Client\Model\MetaAthlete',
        'name' => 'string',
        'distance' => 'float',
        'moving_time' => 'int',
        'elapsed_time' => 'int',
        'total_elevation_gain' => 'float',
        'elev_high' => 'float',
        'elev_low' => 'float',
        'type' => '\Swagger\Client\Model\ActivityType',
        'start_date' => '\DateTime',
        'start_date_local' => '\DateTime',
        'timezone' => 'string',
        'start_latlng' => '\Swagger\Client\Model\LatLng',
        'end_latlng' => '\Swagger\Client\Model\LatLng',
        'achievement_count' => 'int',
        'kudos_count' => 'int',
        'comment_count' => 'int',
        'athlete_count' => 'int',
        'photo_count' => 'int',
        'total_photo_count' => 'int',
        'map' => '\Swagger\Client\Model\PolylineMap',
        'trainer' => 'bool',
        'commute' => 'bool',
        'manual' => 'bool',
        'private' => 'bool',
        'flagged' => 'bool',
        'workout_type' => 'int',
        'upload_id_str' => 'string',
        'average_speed' => 'float',
        'max_speed' => 'float',
        'has_kudoed' => 'bool',
        'gear_id' => 'string',
        'kilojoules' => 'float',
        'average_watts' => 'float',
        'device_watts' => 'bool',
        'max_watts' => 'int',
        'weighted_average_watts' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'external_id' => null,
        'upload_id' => 'int64',
        'athlete' => null,
        'name' => null,
        'distance' => 'float',
        'moving_time' => null,
        'elapsed_time' => null,
        'total_elevation_gain' => 'float',
        'elev_high' => 'float',
        'elev_low' => 'float',
        'type' => null,
        'start_date' => 'date-time',
        'start_date_local' => 'date-time',
        'timezone' => null,
        'start_latlng' => null,
        'end_latlng' => null,
        'achievement_count' => null,
        'kudos_count' => null,
        'comment_count' => null,
        'athlete_count' => null,
        'photo_count' => null,
        'total_photo_count' => null,
        'map' => null,
        'trainer' => null,
        'commute' => null,
        'manual' => null,
        'private' => null,
        'flagged' => null,
        'workout_type' => null,
        'upload_id_str' => null,
        'average_speed' => 'float',
        'max_speed' => 'float',
        'has_kudoed' => null,
        'gear_id' => null,
        'kilojoules' => 'float',
        'average_watts' => 'float',
        'device_watts' => null,
        'max_watts' => null,
        'weighted_average_watts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'external_id' => 'external_id',
        'upload_id' => 'upload_id',
        'athlete' => 'athlete',
        'name' => 'name',
        'distance' => 'distance',
        'moving_time' => 'moving_time',
        'elapsed_time' => 'elapsed_time',
        'total_elevation_gain' => 'total_elevation_gain',
        'elev_high' => 'elev_high',
        'elev_low' => 'elev_low',
        'type' => 'type',
        'start_date' => 'start_date',
        'start_date_local' => 'start_date_local',
        'timezone' => 'timezone',
        'start_latlng' => 'start_latlng',
        'end_latlng' => 'end_latlng',
        'achievement_count' => 'achievement_count',
        'kudos_count' => 'kudos_count',
        'comment_count' => 'comment_count',
        'athlete_count' => 'athlete_count',
        'photo_count' => 'photo_count',
        'total_photo_count' => 'total_photo_count',
        'map' => 'map',
        'trainer' => 'trainer',
        'commute' => 'commute',
        'manual' => 'manual',
        'private' => 'private',
        'flagged' => 'flagged',
        'workout_type' => 'workout_type',
        'upload_id_str' => 'upload_id_str',
        'average_speed' => 'average_speed',
        'max_speed' => 'max_speed',
        'has_kudoed' => 'has_kudoed',
        'gear_id' => 'gear_id',
        'kilojoules' => 'kilojoules',
        'average_watts' => 'average_watts',
        'device_watts' => 'device_watts',
        'max_watts' => 'max_watts',
        'weighted_average_watts' => 'weighted_average_watts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'external_id' => 'setExternalId',
        'upload_id' => 'setUploadId',
        'athlete' => 'setAthlete',
        'name' => 'setName',
        'distance' => 'setDistance',
        'moving_time' => 'setMovingTime',
        'elapsed_time' => 'setElapsedTime',
        'total_elevation_gain' => 'setTotalElevationGain',
        'elev_high' => 'setElevHigh',
        'elev_low' => 'setElevLow',
        'type' => 'setType',
        'start_date' => 'setStartDate',
        'start_date_local' => 'setStartDateLocal',
        'timezone' => 'setTimezone',
        'start_latlng' => 'setStartLatlng',
        'end_latlng' => 'setEndLatlng',
        'achievement_count' => 'setAchievementCount',
        'kudos_count' => 'setKudosCount',
        'comment_count' => 'setCommentCount',
        'athlete_count' => 'setAthleteCount',
        'photo_count' => 'setPhotoCount',
        'total_photo_count' => 'setTotalPhotoCount',
        'map' => 'setMap',
        'trainer' => 'setTrainer',
        'commute' => 'setCommute',
        'manual' => 'setManual',
        'private' => 'setPrivate',
        'flagged' => 'setFlagged',
        'workout_type' => 'setWorkoutType',
        'upload_id_str' => 'setUploadIdStr',
        'average_speed' => 'setAverageSpeed',
        'max_speed' => 'setMaxSpeed',
        'has_kudoed' => 'setHasKudoed',
        'gear_id' => 'setGearId',
        'kilojoules' => 'setKilojoules',
        'average_watts' => 'setAverageWatts',
        'device_watts' => 'setDeviceWatts',
        'max_watts' => 'setMaxWatts',
        'weighted_average_watts' => 'setWeightedAverageWatts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'external_id' => 'getExternalId',
        'upload_id' => 'getUploadId',
        'athlete' => 'getAthlete',
        'name' => 'getName',
        'distance' => 'getDistance',
        'moving_time' => 'getMovingTime',
        'elapsed_time' => 'getElapsedTime',
        'total_elevation_gain' => 'getTotalElevationGain',
        'elev_high' => 'getElevHigh',
        'elev_low' => 'getElevLow',
        'type' => 'getType',
        'start_date' => 'getStartDate',
        'start_date_local' => 'getStartDateLocal',
        'timezone' => 'getTimezone',
        'start_latlng' => 'getStartLatlng',
        'end_latlng' => 'getEndLatlng',
        'achievement_count' => 'getAchievementCount',
        'kudos_count' => 'getKudosCount',
        'comment_count' => 'getCommentCount',
        'athlete_count' => 'getAthleteCount',
        'photo_count' => 'getPhotoCount',
        'total_photo_count' => 'getTotalPhotoCount',
        'map' => 'getMap',
        'trainer' => 'getTrainer',
        'commute' => 'getCommute',
        'manual' => 'getManual',
        'private' => 'getPrivate',
        'flagged' => 'getFlagged',
        'workout_type' => 'getWorkoutType',
        'upload_id_str' => 'getUploadIdStr',
        'average_speed' => 'getAverageSpeed',
        'max_speed' => 'getMaxSpeed',
        'has_kudoed' => 'getHasKudoed',
        'gear_id' => 'getGearId',
        'kilojoules' => 'getKilojoules',
        'average_watts' => 'getAverageWatts',
        'device_watts' => 'getDeviceWatts',
        'max_watts' => 'getMaxWatts',
        'weighted_average_watts' => 'getWeightedAverageWatts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['upload_id'] = isset($data['upload_id']) ? $data['upload_id'] : null;
        $this->container['athlete'] = isset($data['athlete']) ? $data['athlete'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['moving_time'] = isset($data['moving_time']) ? $data['moving_time'] : null;
        $this->container['elapsed_time'] = isset($data['elapsed_time']) ? $data['elapsed_time'] : null;
        $this->container['total_elevation_gain'] = isset($data['total_elevation_gain']) ? $data['total_elevation_gain'] : null;
        $this->container['elev_high'] = isset($data['elev_high']) ? $data['elev_high'] : null;
        $this->container['elev_low'] = isset($data['elev_low']) ? $data['elev_low'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['start_date_local'] = isset($data['start_date_local']) ? $data['start_date_local'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['start_latlng'] = isset($data['start_latlng']) ? $data['start_latlng'] : null;
        $this->container['end_latlng'] = isset($data['end_latlng']) ? $data['end_latlng'] : null;
        $this->container['achievement_count'] = isset($data['achievement_count']) ? $data['achievement_count'] : null;
        $this->container['kudos_count'] = isset($data['kudos_count']) ? $data['kudos_count'] : null;
        $this->container['comment_count'] = isset($data['comment_count']) ? $data['comment_count'] : null;
        $this->container['athlete_count'] = isset($data['athlete_count']) ? $data['athlete_count'] : null;
        $this->container['photo_count'] = isset($data['photo_count']) ? $data['photo_count'] : null;
        $this->container['total_photo_count'] = isset($data['total_photo_count']) ? $data['total_photo_count'] : null;
        $this->container['map'] = isset($data['map']) ? $data['map'] : null;
        $this->container['trainer'] = isset($data['trainer']) ? $data['trainer'] : null;
        $this->container['commute'] = isset($data['commute']) ? $data['commute'] : null;
        $this->container['manual'] = isset($data['manual']) ? $data['manual'] : null;
        $this->container['private'] = isset($data['private']) ? $data['private'] : null;
        $this->container['flagged'] = isset($data['flagged']) ? $data['flagged'] : null;
        $this->container['workout_type'] = isset($data['workout_type']) ? $data['workout_type'] : null;
        $this->container['upload_id_str'] = isset($data['upload_id_str']) ? $data['upload_id_str'] : null;
        $this->container['average_speed'] = isset($data['average_speed']) ? $data['average_speed'] : null;
        $this->container['max_speed'] = isset($data['max_speed']) ? $data['max_speed'] : null;
        $this->container['has_kudoed'] = isset($data['has_kudoed']) ? $data['has_kudoed'] : null;
        $this->container['gear_id'] = isset($data['gear_id']) ? $data['gear_id'] : null;
        $this->container['kilojoules'] = isset($data['kilojoules']) ? $data['kilojoules'] : null;
        $this->container['average_watts'] = isset($data['average_watts']) ? $data['average_watts'] : null;
        $this->container['device_watts'] = isset($data['device_watts']) ? $data['device_watts'] : null;
        $this->container['max_watts'] = isset($data['max_watts']) ? $data['max_watts'] : null;
        $this->container['weighted_average_watts'] = isset($data['weighted_average_watts']) ? $data['weighted_average_watts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['athlete_count']) && ($this->container['athlete_count'] < 1)) {
            $invalidProperties[] = "invalid value for 'athlete_count', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['athlete_count'] < 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier of the activity
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id The identifier provided at upload time
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets upload_id
     *
     * @return int
     */
    public function getUploadId()
    {
        return $this->container['upload_id'];
    }

    /**
     * Sets upload_id
     *
     * @param int $upload_id The identifier of the upload that resulted in this activity
     *
     * @return $this
     */
    public function setUploadId($upload_id)
    {
        $this->container['upload_id'] = $upload_id;

        return $this;
    }

    /**
     * Gets athlete
     *
     * @return \Swagger\Client\Model\MetaAthlete
     */
    public function getAthlete()
    {
        return $this->container['athlete'];
    }

    /**
     * Sets athlete
     *
     * @param \Swagger\Client\Model\MetaAthlete $athlete athlete
     *
     * @return $this
     */
    public function setAthlete($athlete)
    {
        $this->container['athlete'] = $athlete;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the activity
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return float
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param float $distance The activity's distance, in meters
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets moving_time
     *
     * @return int
     */
    public function getMovingTime()
    {
        return $this->container['moving_time'];
    }

    /**
     * Sets moving_time
     *
     * @param int $moving_time The activity's moving time, in seconds
     *
     * @return $this
     */
    public function setMovingTime($moving_time)
    {
        $this->container['moving_time'] = $moving_time;

        return $this;
    }

    /**
     * Gets elapsed_time
     *
     * @return int
     */
    public function getElapsedTime()
    {
        return $this->container['elapsed_time'];
    }

    /**
     * Sets elapsed_time
     *
     * @param int $elapsed_time The activity's elapsed time, in seconds
     *
     * @return $this
     */
    public function setElapsedTime($elapsed_time)
    {
        $this->container['elapsed_time'] = $elapsed_time;

        return $this;
    }

    /**
     * Gets total_elevation_gain
     *
     * @return float
     */
    public function getTotalElevationGain()
    {
        return $this->container['total_elevation_gain'];
    }

    /**
     * Sets total_elevation_gain
     *
     * @param float $total_elevation_gain The activity's total elevation gain.
     *
     * @return $this
     */
    public function setTotalElevationGain($total_elevation_gain)
    {
        $this->container['total_elevation_gain'] = $total_elevation_gain;

        return $this;
    }

    /**
     * Gets elev_high
     *
     * @return float
     */
    public function getElevHigh()
    {
        return $this->container['elev_high'];
    }

    /**
     * Sets elev_high
     *
     * @param float $elev_high The activity's highest elevation, in meters
     *
     * @return $this
     */
    public function setElevHigh($elev_high)
    {
        $this->container['elev_high'] = $elev_high;

        return $this;
    }

    /**
     * Gets elev_low
     *
     * @return float
     */
    public function getElevLow()
    {
        return $this->container['elev_low'];
    }

    /**
     * Sets elev_low
     *
     * @param float $elev_low The activity's lowest elevation, in meters
     *
     * @return $this
     */
    public function setElevLow($elev_low)
    {
        $this->container['elev_low'] = $elev_low;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Swagger\Client\Model\ActivityType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Swagger\Client\Model\ActivityType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date The time at which the activity was started.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets start_date_local
     *
     * @return \DateTime
     */
    public function getStartDateLocal()
    {
        return $this->container['start_date_local'];
    }

    /**
     * Sets start_date_local
     *
     * @param \DateTime $start_date_local The time at which the activity was started in the local timezone.
     *
     * @return $this
     */
    public function setStartDateLocal($start_date_local)
    {
        $this->container['start_date_local'] = $start_date_local;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone The timezone of the activity
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets start_latlng
     *
     * @return \Swagger\Client\Model\LatLng
     */
    public function getStartLatlng()
    {
        return $this->container['start_latlng'];
    }

    /**
     * Sets start_latlng
     *
     * @param \Swagger\Client\Model\LatLng $start_latlng start_latlng
     *
     * @return $this
     */
    public function setStartLatlng($start_latlng)
    {
        $this->container['start_latlng'] = $start_latlng;

        return $this;
    }

    /**
     * Gets end_latlng
     *
     * @return \Swagger\Client\Model\LatLng
     */
    public function getEndLatlng()
    {
        return $this->container['end_latlng'];
    }

    /**
     * Sets end_latlng
     *
     * @param \Swagger\Client\Model\LatLng $end_latlng end_latlng
     *
     * @return $this
     */
    public function setEndLatlng($end_latlng)
    {
        $this->container['end_latlng'] = $end_latlng;

        return $this;
    }

    /**
     * Gets achievement_count
     *
     * @return int
     */
    public function getAchievementCount()
    {
        return $this->container['achievement_count'];
    }

    /**
     * Sets achievement_count
     *
     * @param int $achievement_count The number of achievements gained during this activity
     *
     * @return $this
     */
    public function setAchievementCount($achievement_count)
    {
        $this->container['achievement_count'] = $achievement_count;

        return $this;
    }

    /**
     * Gets kudos_count
     *
     * @return int
     */
    public function getKudosCount()
    {
        return $this->container['kudos_count'];
    }

    /**
     * Sets kudos_count
     *
     * @param int $kudos_count The number of kudos given for this activity
     *
     * @return $this
     */
    public function setKudosCount($kudos_count)
    {
        $this->container['kudos_count'] = $kudos_count;

        return $this;
    }

    /**
     * Gets comment_count
     *
     * @return int
     */
    public function getCommentCount()
    {
        return $this->container['comment_count'];
    }

    /**
     * Sets comment_count
     *
     * @param int $comment_count The number of comments for this activity
     *
     * @return $this
     */
    public function setCommentCount($comment_count)
    {
        $this->container['comment_count'] = $comment_count;

        return $this;
    }

    /**
     * Gets athlete_count
     *
     * @return int
     */
    public function getAthleteCount()
    {
        return $this->container['athlete_count'];
    }

    /**
     * Sets athlete_count
     *
     * @param int $athlete_count The number of athletes for taking part in a group activity
     *
     * @return $this
     */
    public function setAthleteCount($athlete_count)
    {

        if (!is_null($athlete_count) && ($athlete_count < 1)) {
            throw new \InvalidArgumentException('invalid value for $athlete_count when calling SummaryActivity., must be bigger than or equal to 1.');
        }

        $this->container['athlete_count'] = $athlete_count;

        return $this;
    }

    /**
     * Gets photo_count
     *
     * @return int
     */
    public function getPhotoCount()
    {
        return $this->container['photo_count'];
    }

    /**
     * Sets photo_count
     *
     * @param int $photo_count The number of Instagram photos for this activity
     *
     * @return $this
     */
    public function setPhotoCount($photo_count)
    {
        $this->container['photo_count'] = $photo_count;

        return $this;
    }

    /**
     * Gets total_photo_count
     *
     * @return int
     */
    public function getTotalPhotoCount()
    {
        return $this->container['total_photo_count'];
    }

    /**
     * Sets total_photo_count
     *
     * @param int $total_photo_count The number of Instagram and Strava photos for this activity
     *
     * @return $this
     */
    public function setTotalPhotoCount($total_photo_count)
    {
        $this->container['total_photo_count'] = $total_photo_count;

        return $this;
    }

    /**
     * Gets map
     *
     * @return \Swagger\Client\Model\PolylineMap
     */
    public function getMap()
    {
        return $this->container['map'];
    }

    /**
     * Sets map
     *
     * @param \Swagger\Client\Model\PolylineMap $map map
     *
     * @return $this
     */
    public function setMap($map)
    {
        $this->container['map'] = $map;

        return $this;
    }

    /**
     * Gets trainer
     *
     * @return bool
     */
    public function getTrainer()
    {
        return $this->container['trainer'];
    }

    /**
     * Sets trainer
     *
     * @param bool $trainer Whether this activity was recorded on a training machine
     *
     * @return $this
     */
    public function setTrainer($trainer)
    {
        $this->container['trainer'] = $trainer;

        return $this;
    }

    /**
     * Gets commute
     *
     * @return bool
     */
    public function getCommute()
    {
        return $this->container['commute'];
    }

    /**
     * Sets commute
     *
     * @param bool $commute Whether this activity is a commute
     *
     * @return $this
     */
    public function setCommute($commute)
    {
        $this->container['commute'] = $commute;

        return $this;
    }

    /**
     * Gets manual
     *
     * @return bool
     */
    public function getManual()
    {
        return $this->container['manual'];
    }

    /**
     * Sets manual
     *
     * @param bool $manual Whether this activity was created manually
     *
     * @return $this
     */
    public function setManual($manual)
    {
        $this->container['manual'] = $manual;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool $private Whether this activity is private
     *
     * @return $this
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets flagged
     *
     * @return bool
     */
    public function getFlagged()
    {
        return $this->container['flagged'];
    }

    /**
     * Sets flagged
     *
     * @param bool $flagged Whether this activity is flagged
     *
     * @return $this
     */
    public function setFlagged($flagged)
    {
        $this->container['flagged'] = $flagged;

        return $this;
    }

    /**
     * Gets workout_type
     *
     * @return int
     */
    public function getWorkoutType()
    {
        return $this->container['workout_type'];
    }

    /**
     * Sets workout_type
     *
     * @param int $workout_type The activity's workout type
     *
     * @return $this
     */
    public function setWorkoutType($workout_type)
    {
        $this->container['workout_type'] = $workout_type;

        return $this;
    }

    /**
     * Gets upload_id_str
     *
     * @return string
     */
    public function getUploadIdStr()
    {
        return $this->container['upload_id_str'];
    }

    /**
     * Sets upload_id_str
     *
     * @param string $upload_id_str The unique identifier of the upload in string format
     *
     * @return $this
     */
    public function setUploadIdStr($upload_id_str)
    {
        $this->container['upload_id_str'] = $upload_id_str;

        return $this;
    }

    /**
     * Gets average_speed
     *
     * @return float
     */
    public function getAverageSpeed()
    {
        return $this->container['average_speed'];
    }

    /**
     * Sets average_speed
     *
     * @param float $average_speed The activity's average speed, in meters per second
     *
     * @return $this
     */
    public function setAverageSpeed($average_speed)
    {
        $this->container['average_speed'] = $average_speed;

        return $this;
    }

    /**
     * Gets max_speed
     *
     * @return float
     */
    public function getMaxSpeed()
    {
        return $this->container['max_speed'];
    }

    /**
     * Sets max_speed
     *
     * @param float $max_speed The activity's max speed, in meters per second
     *
     * @return $this
     */
    public function setMaxSpeed($max_speed)
    {
        $this->container['max_speed'] = $max_speed;

        return $this;
    }

    /**
     * Gets has_kudoed
     *
     * @return bool
     */
    public function getHasKudoed()
    {
        return $this->container['has_kudoed'];
    }

    /**
     * Sets has_kudoed
     *
     * @param bool $has_kudoed Whether the logged-in athlete has kudoed this activity
     *
     * @return $this
     */
    public function setHasKudoed($has_kudoed)
    {
        $this->container['has_kudoed'] = $has_kudoed;

        return $this;
    }

    /**
     * Gets gear_id
     *
     * @return string
     */
    public function getGearId()
    {
        return $this->container['gear_id'];
    }

    /**
     * Sets gear_id
     *
     * @param string $gear_id The id of the gear for the activity
     *
     * @return $this
     */
    public function setGearId($gear_id)
    {
        $this->container['gear_id'] = $gear_id;

        return $this;
    }

    /**
     * Gets kilojoules
     *
     * @return float
     */
    public function getKilojoules()
    {
        return $this->container['kilojoules'];
    }

    /**
     * Sets kilojoules
     *
     * @param float $kilojoules The total work done in kilojoules during this activity. Rides only
     *
     * @return $this
     */
    public function setKilojoules($kilojoules)
    {
        $this->container['kilojoules'] = $kilojoules;

        return $this;
    }

    /**
     * Gets average_watts
     *
     * @return float
     */
    public function getAverageWatts()
    {
        return $this->container['average_watts'];
    }

    /**
     * Sets average_watts
     *
     * @param float $average_watts Average power output in watts during this activity. Rides only
     *
     * @return $this
     */
    public function setAverageWatts($average_watts)
    {
        $this->container['average_watts'] = $average_watts;

        return $this;
    }

    /**
     * Gets device_watts
     *
     * @return bool
     */
    public function getDeviceWatts()
    {
        return $this->container['device_watts'];
    }

    /**
     * Sets device_watts
     *
     * @param bool $device_watts Whether the watts are from a power meter, false if estimated
     *
     * @return $this
     */
    public function setDeviceWatts($device_watts)
    {
        $this->container['device_watts'] = $device_watts;

        return $this;
    }

    /**
     * Gets max_watts
     *
     * @return int
     */
    public function getMaxWatts()
    {
        return $this->container['max_watts'];
    }

    /**
     * Sets max_watts
     *
     * @param int $max_watts Rides with power meter data only
     *
     * @return $this
     */
    public function setMaxWatts($max_watts)
    {
        $this->container['max_watts'] = $max_watts;

        return $this;
    }

    /**
     * Gets weighted_average_watts
     *
     * @return int
     */
    public function getWeightedAverageWatts()
    {
        return $this->container['weighted_average_watts'];
    }

    /**
     * Sets weighted_average_watts
     *
     * @param int $weighted_average_watts Similar to Normalized Power. Rides with power meter data only
     *
     * @return $this
     */
    public function setWeightedAverageWatts($weighted_average_watts)
    {
        $this->container['weighted_average_watts'] = $weighted_average_watts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


