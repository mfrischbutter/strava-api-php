<?php
/**
 * Lap
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Lap Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Lap implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Lap';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'activity' => '\Swagger\Client\Model\MetaActivity',
        'athlete' => '\Swagger\Client\Model\MetaAthlete',
        'average_cadence' => 'float',
        'average_speed' => 'float',
        'distance' => 'float',
        'elapsed_time' => 'int',
        'start_index' => 'int',
        'end_index' => 'int',
        'lap_index' => 'int',
        'max_speed' => 'float',
        'moving_time' => 'int',
        'name' => 'string',
        'pace_zone' => 'int',
        'split' => 'int',
        'start_date' => '\DateTime',
        'start_date_local' => '\DateTime',
        'total_elevation_gain' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'activity' => null,
        'athlete' => null,
        'average_cadence' => 'float',
        'average_speed' => 'float',
        'distance' => 'float',
        'elapsed_time' => null,
        'start_index' => null,
        'end_index' => null,
        'lap_index' => null,
        'max_speed' => 'float',
        'moving_time' => null,
        'name' => null,
        'pace_zone' => null,
        'split' => null,
        'start_date' => 'date-time',
        'start_date_local' => 'date-time',
        'total_elevation_gain' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'activity' => 'activity',
        'athlete' => 'athlete',
        'average_cadence' => 'average_cadence',
        'average_speed' => 'average_speed',
        'distance' => 'distance',
        'elapsed_time' => 'elapsed_time',
        'start_index' => 'start_index',
        'end_index' => 'end_index',
        'lap_index' => 'lap_index',
        'max_speed' => 'max_speed',
        'moving_time' => 'moving_time',
        'name' => 'name',
        'pace_zone' => 'pace_zone',
        'split' => 'split',
        'start_date' => 'start_date',
        'start_date_local' => 'start_date_local',
        'total_elevation_gain' => 'total_elevation_gain'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'activity' => 'setActivity',
        'athlete' => 'setAthlete',
        'average_cadence' => 'setAverageCadence',
        'average_speed' => 'setAverageSpeed',
        'distance' => 'setDistance',
        'elapsed_time' => 'setElapsedTime',
        'start_index' => 'setStartIndex',
        'end_index' => 'setEndIndex',
        'lap_index' => 'setLapIndex',
        'max_speed' => 'setMaxSpeed',
        'moving_time' => 'setMovingTime',
        'name' => 'setName',
        'pace_zone' => 'setPaceZone',
        'split' => 'setSplit',
        'start_date' => 'setStartDate',
        'start_date_local' => 'setStartDateLocal',
        'total_elevation_gain' => 'setTotalElevationGain'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'activity' => 'getActivity',
        'athlete' => 'getAthlete',
        'average_cadence' => 'getAverageCadence',
        'average_speed' => 'getAverageSpeed',
        'distance' => 'getDistance',
        'elapsed_time' => 'getElapsedTime',
        'start_index' => 'getStartIndex',
        'end_index' => 'getEndIndex',
        'lap_index' => 'getLapIndex',
        'max_speed' => 'getMaxSpeed',
        'moving_time' => 'getMovingTime',
        'name' => 'getName',
        'pace_zone' => 'getPaceZone',
        'split' => 'getSplit',
        'start_date' => 'getStartDate',
        'start_date_local' => 'getStartDateLocal',
        'total_elevation_gain' => 'getTotalElevationGain'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['activity'] = isset($data['activity']) ? $data['activity'] : null;
        $this->container['athlete'] = isset($data['athlete']) ? $data['athlete'] : null;
        $this->container['average_cadence'] = isset($data['average_cadence']) ? $data['average_cadence'] : null;
        $this->container['average_speed'] = isset($data['average_speed']) ? $data['average_speed'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['elapsed_time'] = isset($data['elapsed_time']) ? $data['elapsed_time'] : null;
        $this->container['start_index'] = isset($data['start_index']) ? $data['start_index'] : null;
        $this->container['end_index'] = isset($data['end_index']) ? $data['end_index'] : null;
        $this->container['lap_index'] = isset($data['lap_index']) ? $data['lap_index'] : null;
        $this->container['max_speed'] = isset($data['max_speed']) ? $data['max_speed'] : null;
        $this->container['moving_time'] = isset($data['moving_time']) ? $data['moving_time'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['pace_zone'] = isset($data['pace_zone']) ? $data['pace_zone'] : null;
        $this->container['split'] = isset($data['split']) ? $data['split'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['start_date_local'] = isset($data['start_date_local']) ? $data['start_date_local'] : null;
        $this->container['total_elevation_gain'] = isset($data['total_elevation_gain']) ? $data['total_elevation_gain'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier of this lap
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets activity
     *
     * @return \Swagger\Client\Model\MetaActivity
     */
    public function getActivity()
    {
        return $this->container['activity'];
    }

    /**
     * Sets activity
     *
     * @param \Swagger\Client\Model\MetaActivity $activity activity
     *
     * @return $this
     */
    public function setActivity($activity)
    {
        $this->container['activity'] = $activity;

        return $this;
    }

    /**
     * Gets athlete
     *
     * @return \Swagger\Client\Model\MetaAthlete
     */
    public function getAthlete()
    {
        return $this->container['athlete'];
    }

    /**
     * Sets athlete
     *
     * @param \Swagger\Client\Model\MetaAthlete $athlete athlete
     *
     * @return $this
     */
    public function setAthlete($athlete)
    {
        $this->container['athlete'] = $athlete;

        return $this;
    }

    /**
     * Gets average_cadence
     *
     * @return float
     */
    public function getAverageCadence()
    {
        return $this->container['average_cadence'];
    }

    /**
     * Sets average_cadence
     *
     * @param float $average_cadence The lap's average cadence
     *
     * @return $this
     */
    public function setAverageCadence($average_cadence)
    {
        $this->container['average_cadence'] = $average_cadence;

        return $this;
    }

    /**
     * Gets average_speed
     *
     * @return float
     */
    public function getAverageSpeed()
    {
        return $this->container['average_speed'];
    }

    /**
     * Sets average_speed
     *
     * @param float $average_speed The lap's average speed
     *
     * @return $this
     */
    public function setAverageSpeed($average_speed)
    {
        $this->container['average_speed'] = $average_speed;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return float
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param float $distance The lap's distance, in meters
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets elapsed_time
     *
     * @return int
     */
    public function getElapsedTime()
    {
        return $this->container['elapsed_time'];
    }

    /**
     * Sets elapsed_time
     *
     * @param int $elapsed_time The lap's elapsed time, in seconds
     *
     * @return $this
     */
    public function setElapsedTime($elapsed_time)
    {
        $this->container['elapsed_time'] = $elapsed_time;

        return $this;
    }

    /**
     * Gets start_index
     *
     * @return int
     */
    public function getStartIndex()
    {
        return $this->container['start_index'];
    }

    /**
     * Sets start_index
     *
     * @param int $start_index The start index of this effort in its activity's stream
     *
     * @return $this
     */
    public function setStartIndex($start_index)
    {
        $this->container['start_index'] = $start_index;

        return $this;
    }

    /**
     * Gets end_index
     *
     * @return int
     */
    public function getEndIndex()
    {
        return $this->container['end_index'];
    }

    /**
     * Sets end_index
     *
     * @param int $end_index The end index of this effort in its activity's stream
     *
     * @return $this
     */
    public function setEndIndex($end_index)
    {
        $this->container['end_index'] = $end_index;

        return $this;
    }

    /**
     * Gets lap_index
     *
     * @return int
     */
    public function getLapIndex()
    {
        return $this->container['lap_index'];
    }

    /**
     * Sets lap_index
     *
     * @param int $lap_index The index of this lap in the activity it belongs to
     *
     * @return $this
     */
    public function setLapIndex($lap_index)
    {
        $this->container['lap_index'] = $lap_index;

        return $this;
    }

    /**
     * Gets max_speed
     *
     * @return float
     */
    public function getMaxSpeed()
    {
        return $this->container['max_speed'];
    }

    /**
     * Sets max_speed
     *
     * @param float $max_speed The maximum speed of this lat, in meters per second
     *
     * @return $this
     */
    public function setMaxSpeed($max_speed)
    {
        $this->container['max_speed'] = $max_speed;

        return $this;
    }

    /**
     * Gets moving_time
     *
     * @return int
     */
    public function getMovingTime()
    {
        return $this->container['moving_time'];
    }

    /**
     * Sets moving_time
     *
     * @param int $moving_time The lap's moving time, in seconds
     *
     * @return $this
     */
    public function setMovingTime($moving_time)
    {
        $this->container['moving_time'] = $moving_time;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the lap
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pace_zone
     *
     * @return int
     */
    public function getPaceZone()
    {
        return $this->container['pace_zone'];
    }

    /**
     * Sets pace_zone
     *
     * @param int $pace_zone The athlete's pace zone during this lap
     *
     * @return $this
     */
    public function setPaceZone($pace_zone)
    {
        $this->container['pace_zone'] = $pace_zone;

        return $this;
    }

    /**
     * Gets split
     *
     * @return int
     */
    public function getSplit()
    {
        return $this->container['split'];
    }

    /**
     * Sets split
     *
     * @param int $split split
     *
     * @return $this
     */
    public function setSplit($split)
    {
        $this->container['split'] = $split;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date The time at which the lap was started.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets start_date_local
     *
     * @return \DateTime
     */
    public function getStartDateLocal()
    {
        return $this->container['start_date_local'];
    }

    /**
     * Sets start_date_local
     *
     * @param \DateTime $start_date_local The time at which the lap was started in the local timezone.
     *
     * @return $this
     */
    public function setStartDateLocal($start_date_local)
    {
        $this->container['start_date_local'] = $start_date_local;

        return $this;
    }

    /**
     * Gets total_elevation_gain
     *
     * @return float
     */
    public function getTotalElevationGain()
    {
        return $this->container['total_elevation_gain'];
    }

    /**
     * Sets total_elevation_gain
     *
     * @param float $total_elevation_gain The elevation gain of this lap, in meters
     *
     * @return $this
     */
    public function setTotalElevationGain($total_elevation_gain)
    {
        $this->container['total_elevation_gain'] = $total_elevation_gain;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


